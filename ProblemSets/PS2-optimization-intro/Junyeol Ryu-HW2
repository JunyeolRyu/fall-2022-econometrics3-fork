#1
using Optim
f(x) = -x[1]^4-10x[1]^3-2x[1]^2-3x[1]-2
negf(x) = x[1]^4+10x[1]^3+2x[1]^2+3x[1]+2
startval = rand(1) 
result = optimize(negf, startval, LBFGS())

#2
using DataFrames
using CSV
using HTTP
url = "https://raw.githubusercontent.com/OU-PhD-Econometrics/fall-2022/
master/ProblemSets/PS1-julia-intro/nlsw88.csv"
df = CSV.read(HTTP.get(url).body)
X = [ones(size(df,1),1) df.age df.race.==1 df.collgrad.==1]
y = df.married.==1

function ols(beta, X, y)
ssr = (y.-X*beta)'*(y.-X*beta)
return ssr
end
beta_hat_ols = optimize(b -> ols(b, X, y), rand(size(X,2)), LBFGS(),
Optim.Options(g_tol=1e-6, iterations=100_000,
show_trace=true))
println(beta_hat_ols.minimizer)

using GLM
bols = inv(X'*X)*X'*y
df.white = df.race.==1
bols_lm = lm(@formula(married ~ age + white + collgrad), df)


#3
function loglike(beta_1, X, y)
P_1=exp.(X*beta_1) ./ (1 .+exp.(X*beta_1))
P_2=1 ./ (1 .+ exp.(X*beta_1))
loglh=sum(y.*log.(P_1) .+ (1 .-y) .*log.(P_2))
return loglh
end


beta_hat_log=optimize(beta_1->loglike(beta_1,X,y), rand(size(X,2)), LBFGS(), Optim.Options(g_tol=1e-6, iterations=100_000, show_trace=true))
println(beta_hat_log.minimizer)

#4
fm=@formula(married~age+white+collgrad)
logit=glm(fm, df, Binomial(), LogitLink())


#5
using FreqTables
freqtable(df, :occupation) # note small number of obs in some occupations
df = dropmissing(df, :occupation)
df[df.occupation.==8 ,:occupation] .= 7
df[df.occupation.==9 ,:occupation] .= 7
df[df.occupation.==10,:occupation] .= 7
df[df.occupation.==11,:occupation] .= 7
df[df.occupation.==12,:occupation] .= 7
df[df.occupation.==13,:occupation] .= 7
freqtable(df, :occupation)

X = [ones(size(df,1),1) df.age df.race.==1 df.collgrad.==1]
y = df.occupation
